/*
    interest_point.h: header file for cuda version of interest point matching
*/
#include <cuda.h>
#include <stdio.h>
#include <complex>
#include <cuda_runtime.h>
#include <string>

#include <thrust/device_vector.h>
#include <thrust/transform.h>
#include <thrust/sequence.h>
#include <thrust/copy.h>
#include <thrust/fill.h>
#include <thrust/replace.h>
#include <thrust/functional.h>
#include <iostream>
#include <fstream>

#include <cufft.h>
#include <time.h> //Will be used to help evaluate sections of code

#define DEBUG 0  // put 1 to enable printing in debug mode
#define TILE_WIDTH 2
#define BLOCK_SIZE (32)
#define NUM_DIMS 2
#define BATCH 1
#define NMS_DIST_TO_CENTER 1 // nms parameter
#define CONTRAST_THRESHOLD (0.03)
#define CURVATURE_THRESHOLD 12
#define NUM_BRIEF_COMPS 256
#define RATIO_THRESHOLD 0.5

typedef struct brief_s
  {uint32_t a; uint32_t b; uint32_t c; uint32_t d;
  uint32_t e; uint32_t f; uint32_t g; uint32_t h;} brief_t;
struct timer{cudaEvent_t start; cudaEvent_t stop; const char* name;};
struct compare_loc{char x1; char y1; char x2; char y2;};
static int writeOutput;


__device__ __constant__ static struct compare_loc compare_locs_device[NUM_BRIEF_COMPS] = {{9,6,5,4},
{1,8,4,5},
{9,1,3,5},
{6,7,6,6},
{7,6,4,6},
{2,3,5,6},
{4,4,4,8},
{4,6,2,7},
{6,9,5,3},
{2,9,5,1},
{6,3,7,7},
{3,9,6,2},
{5,6,7,5},
{6,5,4,5},
{6,6,3,9},
{7,5,3,5},
{7,5,6,4},
{4,8,9,5},
{5,8,6,5},
{3,8,4,5},
{3,6,7,4},
{7,3,3,3},
{5,6,2,6},
{5,8,6,3},
{7,6,4,3},
{6,7,6,7},
{6,6,8,4},
{7,4,6,5},
{7,6,7,7},
{5,4,2,4},
{4,7,6,7},
{4,3,9,4},
{7,3,6,7},
{2,4,2,6},
{5,1,5,5},
{1,8,4,3},
{7,6,6,3},
{7,4,6,5},
{5,7,6,4},
{5,2,4,4},
{1,5,4,7},
{6,5,4,4},
{1,6,7,7},
{1,6,2,4},
{5,3,5,7},
{3,5,5,4},
{6,5,4,5},
{6,6,6,7},
{7,7,5,4},
{4,7,3,4},
{6,3,5,9},
{5,5,5,7},
{6,3,4,4},
{6,3,4,6},
{7,5,5,4},
{5,8,2,6},
{5,4,4,8},
{7,6,4,2},
{1,5,3,7},
{4,7,6,8},
{3,3,4,5},
{4,5,6,8},
{6,6,7,5},
{6,7,5,3},
{3,8,6,1},
{4,5,6,4},
{5,2,5,6},
{4,4,6,6},
{6,3,3,6},
{6,9,7,4},
{3,4,3,5},
{5,6,2,2},
{1,5,7,4},
{7,7,5,4},
{4,4,6,6},
{3,2,4,5},
{5,2,3,3},
{2,6,1,5},
{5,5,6,4},
{4,5,4,4},
{9,8,5,7},
{7,6,6,5},
{1,5,2,6},
{6,8,4,7},
{2,4,7,5},
{5,6,6,6},
{5,7,3,6},
{6,5,1,7},
{5,5,4,6},
{8,3,5,8},
{4,3,7,5},
{6,5,5,5},
{6,6,3,8},
{5,9,6,4},
{7,4,3,5},
{6,5,3,7},
{4,5,4,5},
{2,2,3,8},
{8,4,5,7},
{4,2,3,6},
{5,7,4,4},
{6,3,4,6},
{5,5,4,3},
{3,4,4,5},
{4,6,7,6},
{5,4,6,5},
{8,6,5,7},
{3,6,2,9},
{6,8,2,7},
{6,5,1,5},
{5,1,9,6},
{3,3,7,6},
{4,7,5,3},
{5,3,3,4},
{2,7,3,7},
{5,5,6,5},
{4,8,8,6},
{5,1,2,3},
{6,5,4,5},
{3,3,5,6},
{4,9,1,3},
{6,6,7,6},
{2,7,4,5},
{7,3,8,3},
{9,4,4,5},
{7,5,6,2},
{4,7,3,1},
{6,4,4,3},
{3,6,3,3},
{8,1,6,3},
{7,4,7,2},
{6,4,4,6},
{3,2,6,2},
{6,6,4,5},
{4,6,5,6},
{4,5,7,5},
{4,3,5,5},
{3,7,3,4},
{3,6,3,2},
{5,4,5,5},
{2,5,5,7},
{6,5,3,8},
{5,2,5,4},
{6,4,7,2},
{5,4,5,5},
{6,3,5,6},
{2,3,1,5},
{3,4,4,3},
{4,1,2,9},
{5,7,4,1},
{7,6,6,4},
{4,5,8,3},
{7,5,8,4},
{6,4,5,6},
{7,7,4,5},
{5,5,6,4},
{4,4,6,6},
{2,7,6,6},
{5,5,6,6},
{6,4,2,4},
{4,4,6,7},
{4,3,5,6},
{4,3,4,9},
{3,9,4,7},
{4,8,7,7},
{5,6,4,5},
{5,3,3,3},
{5,3,5,4},
{6,5,9,4},
{5,6,5,4},
{8,3,6,6},
{6,1,3,4},
{8,2,8,3},
{4,6,5,4},
{6,6,6,5},
{5,6,3,6},
{6,5,7,3},
{6,5,6,6},
{1,4,3,5},
{3,7,5,7},
{2,3,4,5},
{6,6,5,5},
{8,3,5,3},
{4,4,5,3},
{6,6,3,6},
{6,7,4,5},
{3,3,6,6},
{6,7,8,3},
{4,6,3,8},
{8,5,9,5},
{5,5,8,7},
{8,5,5,5},
{4,4,4,5},
{6,5,4,6},
{5,5,6,6},
{1,6,4,3},
{3,8,4,2},
{6,6,7,3},
{5,5,6,2},
{3,6,7,5},
{4,5,6,4},
{5,3,4,4},
{3,7,4,3},
{7,6,6,6},
{4,5,4,6},
{8,6,7,5},
{3,5,6,7},
{5,3,6,3},
{2,5,5,6},
{4,5,6,6},
{4,4,9,6},
{6,8,5,4},
{7,3,2,6},
{6,4,8,4},
{4,4,6,3},
{6,3,4,3},
{6,5,9,7},
{5,5,6,3},
{6,8,6,5},
{6,5,4,3},
{3,3,3,4},
{6,8,2,1},
{4,7,4,3},
{4,5,3,2},
{5,2,6,3},
{4,4,4,5},
{5,5,8,4},
{6,5,8,8},
{7,5,5,4},
{5,6,4,5},
{6,6,7,2},
{5,3,3,4},
{5,3,6,3},
{6,4,4,5},
{4,4,4,7},
{5,4,4,6},
{6,5,6,4},
{5,1,4,2},
{8,4,3,8},
{4,7,6,9},
{4,3,4,5},
{2,7,6,3},
{7,6,4,7},
{7,5,5,4},
{5,5,1,4},
{7,2,6,7},
{5,5,8,3},
{6,8,7,1},
{5,5,7,6},
{6,5,5,6},
{5,4,5,5},
{9,5,5,6},
{3,5,5,7},
{2,6,4,7},
{3,4,4,4},
{3,5,5,6}
};

namespace cuda
{
/**
 * @brief Gives the product of two square matrices (of equal dimensions)
 * @param sq_matrix_1 First square matrix
 * @param sq_matrix_2 Second square matrix
 * @param sq_matrix_result Pointer to store the resultand matrix
 * @param sq_dimension Dimension of the square matrix
 */
    void interestPointInitialize(float *img1, float *img2, float* filts,
                                 int numRows, int numCols, int numFilters,
                                 int writeToFile);
}
